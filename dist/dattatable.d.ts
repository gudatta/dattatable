// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../gd-sprest-bs

declare module 'dattatable' {
    export * from "dattatable/common";
    export * from "dattatable/dashboard";
    export * from "dattatable/itemForm";
    /** Styling */
    import "./styles";
}

declare module 'dattatable/common' {
    /** Libraries */
    export * from "dattatable/common/canvas";
    export * from "dattatable/common/loadingDialog";
    export * from "dattatable/common/modal";
    /** Methods */
    export const formatDateValue: (value: string) => string;
    export const formatDateTimeValue: (value: string) => string;
}

declare module 'dattatable/dashboard' {
    import { Components } from "gd-sprest-bs";
    import { IFilterItem } from "dattatable/dashboard/filter";
    export interface IDashboardProps {
            columns: Components.ITableColumn[];
            dtProps?: any;
            el: HTMLElement;
            footer?: {
                    items?: Components.INavbarItem[];
                    itemsEnd?: Components.INavbarItem[];
            };
            filters?: IFilterItem[];
            header?: {
                    title?: string;
            };
            navigation?: {
                    title?: string | HTMLElement;
                    items?: Components.INavbarItem[];
                    itemsEnd?: Components.INavbarItem[];
            };
            onRender?: (dt: any) => void;
            rows?: any[];
    }
    /**
        * Dashboard
        */
    export class Dashboard {
            constructor(props: IDashboardProps);
            /**
                * Public Interface
                */
            filter(idx: number, value?: string): void;
            refresh(rows: any[]): void;
            search(value?: string): void;
    }
}

declare module 'dattatable/itemForm' {
    import { Components } from "gd-sprest-bs";
    /**
      * Item Form
      */
    class _ItemForm {
        get form(): Components.IListFormDisplay | Components.IListFormEdit;
        get ListName(): string;
        set ListName(value: string);
        /** Public Methods */
        create(props?: {
            onCreateEditForm?: (props: Components.IListFormEditProps) => Components.IListFormEditProps;
            onSave?: (values: any) => any;
            onUpdate?: (item?: any) => any;
        }): void;
        edit(props: {
            itemId: number;
            onCreateEditForm?: (props: Components.IListFormEditProps) => Components.IListFormEditProps;
            onSave?: (values: any) => any;
            onUpdate?: (item?: any) => any;
        }): void;
        view(props: {
            itemId: number;
            onCreateViewForm?: (props: Components.IListFormDisplayProps) => Components.IListFormDisplayProps;
        }): void;
    }
    export const ItemForm: _ItemForm;
    export {};
}

declare module 'dattatable/common/canvas' {
    /**
      * Canvas Form
      */
    class _CanvasForm {
        constructor();
        get el(): HTMLElement;
        hide(): void;
        setBody(content: any): void;
        setHeader(content: any): void;
        setType(type: any): void;
        show(): void;
    }
    export const CanvasForm: _CanvasForm;
    export {};
}

declare module 'dattatable/common/loadingDialog' {
    /**
      * Loading Dialog
      */
    export class LoadingDialogModal {
        constructor();
        get el(): HTMLElement;
        hide(): void;
        setBody(content: any): void;
        setHeader(content: any): void;
        show(): void;
    }
    export const LoadingDialog: LoadingDialogModal;
}

declare module 'dattatable/common/modal' {
    /**
      * Modal
      */
    class _Modal {
        constructor();
        hide(): void;
        setBody(content: any): void;
        setCloseEvent(event: any): void;
        setFooter(content: any): void;
        setHeader(content: any): void;
        setType(type: any): void;
        show(): void;
    }
    export const Modal: _Modal;
    export {};
}

declare module 'dattatable/dashboard/filter' {
    import { Components } from "gd-sprest-bs";
    /**
        * Filter Item
        */
    export interface IFilterItem {
            header: string;
            items: Components.ICheckboxGroupItem[];
            onFilter?: (value: string) => void;
    }
    /**
        * Filter Slideout
        */
    export class FilterSlideout {
            constructor(filters?: IFilterItem[]);
            show(): void;
    }
}

